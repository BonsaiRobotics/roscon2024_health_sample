{
  "configById": {
    "DiagnosticSummary!b89n48": {
      "minLevel": 0,
      "pinnedIds": [],
      "hardwareIdFilter": "",
      "topicToRender": "/diagnostics",
      "sortByLevel": true
    },
    "DiagnosticStatusPanel!3b2oqkn": {
      "selectedHardwareId": "health",
      "selectedName": "rosgraph::Graph::Continuity::/diagnostics_agg",
      "topicToRender": "/diagnostics"
    },
    "DiagnosticSummary!3e86hmw": {
      "minLevel": 0,
      "pinnedIds": [],
      "hardwareIdFilter": "",
      "topicToRender": "/diagnostics_agg",
      "sortByLevel": true
    },
    "DiagnosticStatusPanel!1x1dhvg": {
      "selectedHardwareId": "",
      "selectedName": "/Nodes",
      "topicToRender": "/diagnostics_agg"
    },
    "RawMessages!u9ya46": {
      "diffEnabled": false,
      "diffMethod": "custom",
      "diffTopicPath": "",
      "showFullMessageForDiff": false,
      "topicPath": "/diagnostics_toplevel_status"
    },
    "Indicator!1y2wfw2": {
      "path": "/diagnostics_toplevel_status.level",
      "style": "bulb",
      "fallbackColor": "#a0a0a0",
      "fallbackLabel": "False",
      "rules": [
        {
          "operator": "=",
          "rawValue": "0",
          "color": "#68e24a",
          "label": "OK"
        },
        {
          "operator": "=",
          "rawValue": "1",
          "color": "#e6ff00",
          "label": "WARN"
        },
        {
          "operator": "=",
          "rawValue": "2",
          "color": "#f01313",
          "label": "ERROR"
        },
        {
          "operator": "=",
          "rawValue": "3",
          "color": "#434343",
          "label": "STALE"
        }
      ]
    },
    "Tab!2qp7thk": {
      "activeTabIdx": 0,
      "tabs": [
        {
          "title": "diagnostics",
          "layout": {
            "first": {
              "first": {
                "direction": "column",
                "second": "DiagnosticStatusPanel!3b2oqkn",
                "first": "DiagnosticSummary!b89n48"
              },
              "second": {
                "direction": "column",
                "second": "DiagnosticStatusPanel!1x1dhvg",
                "first": "DiagnosticSummary!3e86hmw"
              },
              "direction": "row",
              "splitPercentage": 62.529550827423165
            },
            "second": {
              "first": "RawMessages!u9ya46",
              "second": "Indicator!1y2wfw2",
              "direction": "column",
              "splitPercentage": 50.31210986267166
            },
            "direction": "row",
            "splitPercentage": 70.09113504556753
          }
        }
      ]
    }
  },
  "globalVariables": {},
  "userNodes": {
    "f94d77b3-fe57-4cbc-a83c-c1fcd4a91752": {
      "sourceCode": "// The ./types module provides helper types for your Input events and messages.\nimport { Input, Message } from \"./types\";\n\n// Your script can output well-known message types, any of your custom message types, or\n// complete custom message types.\n//\n// Use `Message` to access types from the schemas defined in your data source:\n// type Twist = Message<\"geometry_msgs/Twist\">;\n//\n// Import from the @foxglove/schemas package to use foxglove schema types:\n// import { Pose, LocationFix } from \"@foxglove/schemas\";\n//\n// Conventionally, it's common to make a _type alias_ for your script's output type\n// and use that type name as the return type for your script function.\n// Here we've called the type `Output` but you can pick any type name.\ntype Output = {\n  hello: string;\n};\n\n// These are the topics your script \"subscribes\" to. Studio will invoke your script function\n// when any message is received on one of these topics.\nexport const inputs = [\"/input/topic\"];\n\n// Any output your script produces is \"published\" to this topic. Published messages are only visible within Studio, not to your original data source.\nexport const output = \"/studio_script/output_topic\";\n\n// This function is called with messages from your input topics.\n// The first argument is an event with the topic, receive time, and message.\n// Use the `Input<...>` helper to get the correct event type for your input topic messages.\nexport default function script(event: Input<\"/input/topic\">): Output {\n  return {\n    hello: \"world!\",\n  };\n};",
      "name": "f94d77b3"
    }
  },
  "playbackConfig": {
    "speed": 1
  },
  "layout": "Tab!2qp7thk"
}